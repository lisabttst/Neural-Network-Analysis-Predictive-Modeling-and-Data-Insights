{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train :  (60000, 28, 28)\n",
      "y_train :  (60000,)\n",
      "x_test  :  (10000, 28, 28)\n",
      "y_test  :  (10000,)\n"
     ]
    }
   ],
   "source": [
    "(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n",
    "\n",
    "print(\"x_train : \",x_train.shape)\n",
    "print(\"y_train : \",y_train.shape)\n",
    "print(\"x_test  : \",x_test.shape)\n",
    "print(\"y_test  : \",y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "xmax=x_train.max()\n",
    "x_train = x_train / xmax\n",
    "x_test  = x_test  / xmax"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Some examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1d75f658d90>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(x_train[8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "hidden1     = 100\n",
    "hidden2     = 100\n",
    "\n",
    "model = keras.Sequential([\n",
    "    keras.layers.Input((28,28)),\n",
    "    keras.layers.Flatten(),\n",
    "    keras.layers.Dense( hidden1, activation='relu'),\n",
    "    keras.layers.Dense( hidden2, activation='relu'),\n",
    "    keras.layers.Dense( 10,      activation='softmax')\n",
    "])\n",
    "\n",
    "model.compile(optimizer='adam',\n",
    "              loss='sparse_categorical_crossentropy',\n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/16\n",
      "118/118 [==============================] - 2s 14ms/step - loss: 1.0472 - accuracy: 0.6931 - val_loss: 0.2377 - val_accuracy: 0.9326\n",
      "Epoch 2/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.2221 - accuracy: 0.9366 - val_loss: 0.1713 - val_accuracy: 0.9509\n",
      "Epoch 3/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.1612 - accuracy: 0.9544 - val_loss: 0.1393 - val_accuracy: 0.9578\n",
      "Epoch 4/16\n",
      "118/118 [==============================] - 1s 5ms/step - loss: 0.1214 - accuracy: 0.9652 - val_loss: 0.1191 - val_accuracy: 0.9641\n",
      "Epoch 5/16\n",
      "118/118 [==============================] - 1s 5ms/step - loss: 0.1026 - accuracy: 0.9702 - val_loss: 0.1061 - val_accuracy: 0.9680\n",
      "Epoch 6/16\n",
      "118/118 [==============================] - 1s 5ms/step - loss: 0.0806 - accuracy: 0.9763 - val_loss: 0.0970 - val_accuracy: 0.9696\n",
      "Epoch 7/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0714 - accuracy: 0.9785 - val_loss: 0.0871 - val_accuracy: 0.9726\n",
      "Epoch 8/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0626 - accuracy: 0.9820 - val_loss: 0.0849 - val_accuracy: 0.9736\n",
      "Epoch 9/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0544 - accuracy: 0.9842 - val_loss: 0.0837 - val_accuracy: 0.9748\n",
      "Epoch 10/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0489 - accuracy: 0.9861 - val_loss: 0.0778 - val_accuracy: 0.9758\n",
      "Epoch 11/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0419 - accuracy: 0.9885 - val_loss: 0.0761 - val_accuracy: 0.9764\n",
      "Epoch 12/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0380 - accuracy: 0.9899 - val_loss: 0.0732 - val_accuracy: 0.9778\n",
      "Epoch 13/16\n",
      "118/118 [==============================] - 1s 6ms/step - loss: 0.0342 - accuracy: 0.9908 - val_loss: 0.0772 - val_accuracy: 0.9764\n",
      "Epoch 14/16\n",
      "118/118 [==============================] - ETA: 0s - loss: 0.0276 - accuracy: 0.99 - 1s 6ms/step - loss: 0.0278 - accuracy: 0.9929 - val_loss: 0.0745 - val_accuracy: 0.9778\n",
      "Epoch 15/16\n",
      "118/118 [==============================] - 1s 5ms/step - loss: 0.0266 - accuracy: 0.9930 - val_loss: 0.0730 - val_accuracy: 0.9777\n",
      "Epoch 16/16\n",
      "118/118 [==============================] - 1s 5ms/step - loss: 0.0235 - accuracy: 0.9938 - val_loss: 0.0772 - val_accuracy: 0.9781\n"
     ]
    }
   ],
   "source": [
    "batch_size  = 512\n",
    "epochs      =  16\n",
    "\n",
    "history = model.fit(  x_train, y_train,\n",
    "                      batch_size      = batch_size,\n",
    "                      epochs          = epochs,\n",
    "                      verbose         = 1,\n",
    "                      validation_data = (x_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation of the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss     : 0.07722221314907074\n",
      "Test accuracy : 0.9781000018119812\n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(x_test, y_test, verbose=0)\n",
    "\n",
    "print('Test loss     :', score[0])\n",
    "print('Test accuracy :', score[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1d70d18e8b0>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1d70d1ff7c0>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_sigmoid = model.predict(x_test)\n",
    "y_pred    = np.argmax(y_sigmoid, axis=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "228"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "errors=[ i for i in range(len(x_test)) if y_pred[i]!=y_test[i] ]\n",
    "len(errors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 970    0    1    0    0    2    5    1    1    0]\n",
      " [   0 1126    3    0    0    1    2    1    2    0]\n",
      " [   5    3 1004    3    1    0    2    6    8    0]\n",
      " [   0    1    1  993    0    6    0    4    2    3]\n",
      " [   1    2    1    0  962    2    8    1    1    4]\n",
      " [   3    0    0    8    1  867    7    0    5    1]\n",
      " [   1    2    3    1    7    4  939    0    1    0]\n",
      " [   0    6    5    4    2    0    0 1002    1    8]\n",
      " [   4    1    4   10    4    6    4    3  936    2]\n",
      " [   2    5    0    8   11    4    1    3    2  973]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test, y_pred)) # order matters! (actual, predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.99       980\n",
      "           1       0.98      0.99      0.99      1135\n",
      "           2       0.98      0.97      0.98      1032\n",
      "           3       0.97      0.98      0.97      1010\n",
      "           4       0.97      0.98      0.98       982\n",
      "           5       0.97      0.97      0.97       892\n",
      "           6       0.97      0.98      0.98       958\n",
      "           7       0.98      0.97      0.98      1028\n",
      "           8       0.98      0.96      0.97       974\n",
      "           9       0.98      0.96      0.97      1009\n",
      "\n",
      "    accuracy                           0.98     10000\n",
      "   macro avg       0.98      0.98      0.98     10000\n",
      "weighted avg       0.98      0.98      0.98     10000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
